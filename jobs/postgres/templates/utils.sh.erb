#!/bin/bash -exu

source /var/vcap/jobs/postgres_li/bin/pgconfig.sh

function pgexec() {
  local database
  database="${1}"

  local command
  command="${2}"

  "${PACKAGE_DIR}/bin/psql" \
    -U "vcap" \
    -p "${PORT}" \
    -d "${database}" \
    -c "${command}"
}

function is_major() {
  [ "${pgversion_current%.*}" != "${pgversion_upgrade_from%.*}" ]
}

function init_data_dir(){
  if [ ! -f "${DATA_DIR}/postgresql.conf" ]; then
    # initdb creates data directories
    su - vcap -c "${PACKAGE_DIR}/bin/initdb -E utf8 --locale en_US.UTF-8 -D ${DATA_DIR}"
  fi
}

function run_major_upgrade(){
  if is_major; then
    rm -rf ${DATA_DIR_PREVIOUS}
    echo "Running a PostgreSQL major upgrade from ${pgversion_upgrade_from} to ${pgversion_current}"
    touch "$POSTGRES_UPGRADE_LOCK"
    chmod 755 "$POSTGRES_UPGRADE_LOCK"
    init_data_dir
    # Move to a directory writeable by vcap user
    su - vcap <<EOF
    set -e
    mkdir -p "${PG_STORE_DIR}/pg_upgrade_tmp"
    pushd "${PG_STORE_DIR}/pg_upgrade_tmp"
      ${PACKAGE_DIR}/bin/pg_upgrade \
        --old-datadir ${DATA_DIR_OLD} \
        --new-datadir ${DATA_DIR} \
        --old-bindir ${PACKAGE_DIR_OLD}/bin \
        --new-bindir ${PACKAGE_DIR}/bin
    popd
    mv "${DATA_DIR_OLD}" "${DATA_DIR_PREVIOUS}"
EOF
    rm -f "${POSTGRES_UPGRADE_LOCK}"
  fi
}
function run_minor_upgrade(){
  if ! is_major; then
    rm -rf ${DATA_DIR_PREVIOUS}
    echo "Running a PostgreSQL minor upgrade from ${pgversion_upgrade_from} to ${pgversion_current}"
    <% if p("databases.skip_data_copy_in_minor") %>
    mv "${DATA_DIR_OLD}" "${DATA_DIR}"
    <% else %>
    mkdir -p "${DATA_DIR}"
    chown -R vcap:vcap "${DATA_DIR}"
    chmod 700 "${DATA_DIR}"

    su - vcap <<EOF
    set -e
    pushd "${DATA_DIR_OLD}" > /dev/null
      cp -r * ${DATA_DIR}
    popd > /dev/null
    mv "${DATA_DIR_OLD}" "${DATA_DIR_PREVIOUS}"
EOF
    <% end %>
  fi
}

function create_roles() {
  echo "Creating roles..."
  <% p("databases.roles", []).each do |role| %>
    echo "Trying to create role <%= role["name"] %>..."
    set +e
    # TODO remove unused roles automatically
    # Default permissions are: nosuperuser nologin inherit nocreatedb.
    # Will fail if role already exists, which is OK
    pgexec postgres "CREATE ROLE \"<%= role["name"] %>\" WITH LOGIN"
    set -e
    <% if role["password"] %>
      <% require 'shellwords' %>
      echo "Setting password for role <%= role["name"] %>..."
      pgexec postgres "ALTER ROLE \"<%= role["name"] %>\" WITH LOGIN PASSWORD '<%= Shellwords.shellescape(role["password"]) %>'"
    <% end %>
    <% if role["permissions"] %>
      echo "Adding permissions <%= role["permissions"].join(' ') %> for role <%= role["name"] %>..."
      pgexec postgres "ALTER ROLE \"<%= role["name"] %>\" WITH <%= role["permissions"].join(' ') %>"
    <% end %>
  <% end %>
}

function create_databases() {
  echo "Creating databases..."
  <% p("databases.databases", []).each do |database| %>
    echo "Trying to create database <%= database["name"] %>..."
    set +e
    "${PACKAGE_DIR}/bin/createdb" "<%= database["name"] %>" -p ${PORT}
    set -e

    <% if database["citext"] %>
      echo "Trying to install citext..."
      set +e
      pgexec "<%= database["name"] %>" "CREATE EXTENSION citext"
      pgexec "<%= database["name"] %>" "CREATE EXTENSION citext FROM UNPACKAGED"
      set -e
    <% end %>

    echo "Enabling pgcrypto extension..."
    pgexec "<%= database["name"] %>" "CREATE EXTENSION IF NOT EXISTS pgcrypto"


    <% if p("databases.collect_statement_statistics") %>
      echo "Enabling pg_stat_statements extension..."
      pgexec "<%= database["name"] %>" "CREATE EXTENSION IF NOT EXISTS pg_stat_statements"
    <% end %>

    <% if database["run_on_every_startup"] %>
      <% database["run_on_every_startup"].each do |query| %>
        echo "WARNING: run_on_every_startup option is deprecated!!!"
        pgexec "<%= database["name"] %>" "<%= query %>"
      <% end %>
    <% end %>
  <% end %>
}
